pipeline {
    agent any
    tools {
        maven "Maven" // Replace with your Maven installation name in Jenkins
    }
    environment {
        IMAGE_NAME = "musashi93/utilisateur-service"
        VERSION = "${env.BUILD_NUMBER}" // Use Jenkins build number as the version
        SONARQUBE_TOKEN = credentials('sonarqube-token') // SonarQube token stored in Jenkins credentials
    }
    stages {

        stage('Checkout') {
            steps {
                // Clone the repository from GitHub
                git url: 'https://github.com/farehAbdallah/GestionDesLaboratoires.git', branch: 'Ahmed'
            }
        }

        stage('Build and Test Utilisateur Service') {
            steps {
                dir('Backend-GestionLaboratoires/UtilisateurService') {
                    // Run Maven build and tests
                    bat 'mvn clean install -DskipTests=false'
                }
            }
        }

        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('SonarQube') {
                    dir('Backend-GestionLaboratoires/UtilisateurService') {
                        bat 'mvn sonar:sonar'
                    }
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                dir('Backend-GestionLaboratoires/UtilisateurService') {
                    // Build the Docker image with a versioned tag
                    bat "docker build -t ${IMAGE_NAME}:${VERSION} ."
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                script {
                    docker.withRegistry('https://index.docker.io/v1/', 'dockerhub') {
                        // Push the Docker image to Docker Hub
                        bat "docker push ${IMAGE_NAME}:${VERSION}"
                    }
                }
            }
        }

        stage('Update Kubernetes Deployment') {
            steps {
                dir('Backend-GestionLaboratoires/UtilisateurService') {
                    // Dynamically update the Kubernetes deployment YAML file with the new image tag
                    bat "sed -i \"s|image: ${IMAGE_NAME}:.*|image: ${IMAGE_NAME}:${VERSION}|g\" ../../k8s/Service-Utilisateurs-Deployment.yaml"
                }
            }
        }

        stage('Deploy to Minikube') {
            steps {
                withCredentials([string(credentialsId: 'kubeconfig-text', variable: 'KUBECONFIG_PATH')]) {
                    // Apply the updated Kubernetes deployment file to Minikube
                    bat "kubectl --kubeconfig=%KUBECONFIG_PATH% apply -f Backend-GestionLaboratoires/k8s/Service-Utilisateurs-Deployment.yaml"
                }
            }
        }
    }

    post {
        success {
            script {
                echo "Pipeline completed successfully. Docker image ${IMAGE_NAME}:${VERSION} has been deployed."
            }
        }
        failure {
            script {
                echo "Pipeline failed. Check the logs for details."
            }
        }
    }
}
