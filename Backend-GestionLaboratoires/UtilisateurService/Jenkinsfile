pipeline {
    agent any
    tools {
        maven "Maven"
    }
    environment {
        SONARQUBE_TOKEN = credentials('sonarqube-token')
    }
    stages {

        stage('Checkout') {

            steps {
                // Clone the full repository from GitHub
                git url: 'https://github.com/farehAbdallah/GestionDesLaboratoires.git', branch: 'Ahmed'
            }
        }

        stage('Check for Changes') {
            steps {
                script {
                    def changesDetected = sh(script: 'git fetch && git diff --quiet origin/Ahmed', returnStatus: true) != 0
                    if (!changesDetected) {
                        currentBuild.description = "NO_CHANGES"
                        echo 'No changes detected. Skipping the pipeline.'
                        currentBuild.result = 'SUCCESS'
                        error('Skipping remaining stages due to no changes.')
                    } else {
                        currentBuild.description = "CHANGED"
                        echo 'Changes detected. Proceeding with the pipeline.'
                    }
                }
            }
        }

       /* stage('Build and Test utilisateur Service') {

            steps {
                dir('Backend-GestionLaboratoires/UtilisateurService') {
                    // Run Maven build and tests
                    bat 'mvn clean install -DskipTests=false'
                }
            }
        }*/
        stage('SonarQube Analysis') {

            steps {
                    withSonarQubeEnv('SonarQube') {
                        dir('Backend-GestionLaboratoires/UtilisateurService') {
                            bat 'mvn sonar:sonar'
                    }
                }
            }
        }

    /*    stage('Build Docker Image') {

            steps {
                dir('Backend-GestionLaboratoires/UtilisateurService') {
                    // Build the Docker image with a specific tag
                    bat 'docker build -t musashi93/utilisateur-service:latest .'
                }
            }
        }

        stage('Push Docker Image') {

            steps {
                script {
                    docker.withRegistry('https://index.docker.io/v1/', 'dockerhub') {
                        bat 'docker push musashi93/utilisateur-service:latest'
                    }
                }
            }
        }

        stage('Deploy to Minikube') {

            steps {
                withCredentials([string(credentialsId: 'kubeconfig-text', variable: 'KUBECONFIG_PATH')]) {
                    // Apply the Kubernetes deployment file to Minikube
                    bat "kubectl --kubeconfig=%KUBECONFIG_PATH% apply -f k8s/Service-Utilisateurs-Deployment.yaml"
                }
            }
        }*/
    }

    post {
        success {
            script {
                if (currentBuild.description != "CHANGED") {
                    echo 'No changes to build. Job marked as successful without build steps.'
                }
            }
        }
    }
}
